package com.cst438.controllers;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.oauth2.core.user.OAuth2User;



import com.cst438.domain.Assignment;
import com.cst438.domain.AssignmentListDTO;
import com.cst438.domain.AssignmentGrade;
import com.cst438.domain.AssignmentGradeRepository;
import com.cst438.domain.AssignmentRepository;
import com.cst438.domain.Course;
import com.cst438.domain.CourseDTOG;
import com.cst438.domain.CourseRepository;
import com.cst438.domain.Enrollment;
import com.cst438.domain.EnrollmentRepository;
import com.cst438.domain.GradebookDTO;
import com.cst438.services.RegistrationService;


@RestController
@CrossOrigin(origins = {"http://localhost:3000", "https://cst438gradebook-frontend.herokuapp.com/"})
public class GradeBookController {
	
	@Autowired
	AssignmentRepository assignmentRepository;
	
	@Autowired
	AssignmentGradeRepository assignmentGradeRepository;
	
	@Autowired
	CourseRepository courseRepository;
	
	@Autowired
	EnrollmentRepository enrollmentRepository;
	
	@Autowired
	RegistrationService registrationService;
	
	// get assignments for an instructor that need grading
	@GetMapping("/gradebook")
	public AssignmentListDTO getAssignmentsNeedGrading(@AuthenticationPrincipal OAuth2User principal) {
		
		// check that this request is from the course instructor 
		String instructor_email = principal.getAttribute("email");		
		List<Assignment> assignments = assignmentRepository.findNeedGradingByEmail(instructor_email);
		
		AssignmentListDTO result = new AssignmentListDTO();
		for (Assignment a: assignments) {
			result.assignments.add(new AssignmentListDTO.AssignmentDTO(a.getId(), a.getCourse().getCourse_id(), a.getName(), a.getDueDate().toString() , a.getCourse().getTitle()));
		}
		return result;
	}
	
	@GetMapping("/gradebook/{id}")
	public GradebookDTO getGradebook(@PathVariable("id") Integer assignmentId, @AuthenticationPrincipal OAuth2User principal) {
		// check for valid assignment
		int asID = assignmentId;
		Assignment assignment = assignmentRepository.findById(asID);
		if (assignment == null) {
			throw new ResponseStatusException( HttpStatus.BAD_REQUEST, "Assignment not found. "+assignmentId );
		}
		
		// determine if user is instructor or student
		String email = principal.getAttribute("email");
		
		// initialize return DTO
		GradebookDTO gradebook = new GradebookDTO();
		
		// handle case where student is making request
		if(null != assignmentGradeRepository.findByAssignmentIdAndStudentEmail(asID, email)) {
			// grab student enrollment
			Enrollment e = enrollmentRepository.findByEmail(email);
			// make sure student is enrolled in course the assignment is for (kind of redundant, but enrollment is needed creating an assignment grade)
			if(null == e) {
				throw new ResponseStatusException( HttpStatus.UNAUTHORIZED, "Student is not enrolled in course." );
			}
			// populate DTO
			gradebook.assignmentId= assignmentId;
			gradebook.assignmentName = assignment.getName();
			GradebookDTO.Grade grade = new GradebookDTO.Grade();
			grade.name = e.getStudentName();
			grade.email = e.getStudentEmail();
			// does student have a grade for this assignment
			AssignmentGrade ag = assignmentGradeRepository.findByAssignmentIdAndStudentEmail(assignmentId,  grade.email);
			if (ag != null) {
				grade.grade = ag.getScore();
				grade.assignmentGradeId = ag.getId();
			} else {
				grade.grade = "";
				AssignmentGrade agNew = new AssignmentGrade(assignment, e);
				agNew = assignmentGradeRepository.save(agNew);
				grade.assignmentGradeId = agNew.getId();  // key value generated by database on save.
			}
			gradebook.grades.add(grade);
		}
		// handle the case where instructor is making request
		else if (assignment.getCourse().getInstructor().equals(email)) {
			// get the enrollment for the course
			//  for each student, get the current grade for assignment, 
			//   if the student does not have a current grade, create an empty grade
		
			gradebook.assignmentId= assignmentId;
			gradebook.assignmentName = assignment.getName();
			for (Enrollment e : assignment.getCourse().getEnrollments()) {
				GradebookDTO.Grade grade = new GradebookDTO.Grade();
				grade.name = e.getStudentName();
				grade.email = e.getStudentEmail();
				// does student have a grade for this assignment
				AssignmentGrade ag = assignmentGradeRepository.findByAssignmentIdAndStudentEmail(assignmentId,  grade.email);
				if (ag != null) {
					grade.grade = ag.getScore();
					grade.assignmentGradeId = ag.getId();
				} else {
					grade.grade = "";
					AssignmentGrade agNew = new AssignmentGrade(assignment, e);
					agNew = assignmentGradeRepository.save(agNew);
					grade.assignmentGradeId = agNew.getId();  // key value generated by database on save.
				}
				gradebook.grades.add(grade);
			}
			
		}
		// handle all other requests (not authorized)
		else {
			throw new ResponseStatusException( HttpStatus.UNAUTHORIZED, "Not Authorized." );
		}
		
		return gradebook;
	}
	
	// add a new assignment to a course
	@PostMapping("/gradebook")
	@Transactional
	public void createAssignment (@RequestBody AssignmentListDTO.AssignmentDTO newAssignment, @AuthenticationPrincipal OAuth2User principal) {
		
		// check for request body
		if(null == newAssignment) {
			throw new ResponseStatusException( HttpStatus.BAD_REQUEST, "Request body cannot be null." );
		}
		
		// check for course id
		if (newAssignment.courseId == 0 ) {
			throw new ResponseStatusException( HttpStatus.BAD_REQUEST, "Property courseId cannot must be specified for assignment." );
		}
		// get course from id
		Course c = courseRepository.findByCourse_id(newAssignment.courseId);
		if(c == null) {
			throw new ResponseStatusException( HttpStatus.BAD_REQUEST, "course_id not found." );
		}
		// check that this request is from the course instructor 
		String instructor_email = principal.getAttribute("email");
		if (!c.getInstructor().equals(instructor_email)) {
			throw new ResponseStatusException( HttpStatus.UNAUTHORIZED, "Not Authorized." );
		}
		
		// check that all other required info is present
		if (newAssignment.assignmentName == null || newAssignment.dueDate == null ) {
			throw new ResponseStatusException( HttpStatus.BAD_REQUEST, "Property assignmentName cannot be null for assignment." );
		}
		if (newAssignment.dueDate == null ) {
			throw new ResponseStatusException( HttpStatus.BAD_REQUEST, "Property dueDate cannot be null for assignment." );
		}
		// create assignment object from request DTO and save to the database
		Assignment assignment = new Assignment();
		assignment.setName(newAssignment.assignmentName);
		assignment.setDueDate(java.sql.Date.valueOf(newAssignment.dueDate));
		assignment.setCourse(c);
		assignmentRepository.save(assignment);
		
	}
	
	
	// update an assignment
	// currently only name change is supported
	@PostMapping("/gradebook/{assignment_id}")
	@Transactional
	public void updateAssignment (@RequestBody AssignmentListDTO.AssignmentDTO assignmentUpdate, @PathVariable int assignment_id, @AuthenticationPrincipal OAuth2User principal) {
		
		// Assignment object 
		Assignment assignment = assignmentRepository.findById(assignment_id);
		
		// check for assignment_id
		if(null == assignment) {
			throw new ResponseStatusException( HttpStatus.BAD_REQUEST, "AssignmentId not found." );
		}
		
		// check for request body
		if(null == assignmentUpdate) {
			throw new ResponseStatusException( HttpStatus.BAD_REQUEST, "Request body cannot be null." );
		}
				
		// get course from id
		Course c = assignment.getCourse();
		if(c == null) {
			throw new ResponseStatusException( HttpStatus.BAD_REQUEST, "course_id not found." );
		}
		// check that this request is from the course instructor 
		String instructor_email = principal.getAttribute("email");
		if (!c.getInstructor().equals(instructor_email)) {
			throw new ResponseStatusException( HttpStatus.UNAUTHORIZED, "Not Authorized." );
		}
		
		assignment.setName(assignmentUpdate.assignmentName);
		
		assignmentRepository.save(assignment);
		
	}
	
	
	// delete an assignment
	@DeleteMapping("/gradebook/{assignment_id}")
	@Transactional
	public void deleteAssignment (@PathVariable int assignment_id, @AuthenticationPrincipal OAuth2User principal) {
		
		// Assignment object 
		Assignment assignment = assignmentRepository.findById(assignment_id);
		
		// check for assignment_id
		if(null == assignment) {
			throw new ResponseStatusException( HttpStatus.BAD_REQUEST, "AssignmentId not found." );
		}	
		// get course from id
		Course c = assignment.getCourse();
		if(c == null) {
			throw new ResponseStatusException( HttpStatus.BAD_REQUEST, "course_id not found." );
		}
		// check that this request is from the course instructor 
		String instructor_email = principal.getAttribute("email");
		if (!c.getInstructor().equals(instructor_email)) {
			throw new ResponseStatusException( HttpStatus.UNAUTHORIZED, "Not Authorized." );
		}
		
		// check that assignment has no grades 
		//(might need a getter for assignment grades list size in assignment class but using pre-coded methods for now)
		if(assignment.getNeedsGrading() == 1) {
			throw new ResponseStatusException( HttpStatus.BAD_REQUEST, "Assignments with grades cannot be deleted. " );
		}
		
		assignmentRepository.delete(assignment);
		
	}
	
	@PostMapping("/course/{course_id}/finalgrades")
	@Transactional
	public void calcFinalGrades(@PathVariable int course_id, @AuthenticationPrincipal OAuth2User principal) {
		System.out.println("Gradebook - calcFinalGrades for course " + course_id);
		
		// check that this request is from the course instructor 
		String instructor_email = principal.getAttribute("email");
		
		Course c = courseRepository.findByCourse_id(course_id);
		if (!c.getInstructor().equals(instructor_email)) {
			throw new ResponseStatusException( HttpStatus.UNAUTHORIZED, "Not Authorized." );
		}
		
		CourseDTOG cdto = new CourseDTOG();
		cdto.course_id = course_id;
		cdto.grades = new ArrayList<>();
		for (Enrollment e: c.getEnrollments()) {
			double total=0.0;
			int count = 0;
			for (AssignmentGrade ag : e.getAssignmentGrades()) {
				count++;
				total = total + Double.parseDouble(ag.getScore());
			}
			double average = total/count;
			CourseDTOG.GradeDTO gdto = new CourseDTOG.GradeDTO();
			gdto.grade=letterGrade(average);
			gdto.student_email=e.getStudentEmail();
			gdto.student_name=e.getStudentName();
			cdto.grades.add(gdto);
			System.out.println("Course="+course_id+" Student="+e.getStudentEmail()+" grade="+gdto.grade);
		}
		
		registrationService.sendFinalGrades(course_id, cdto);
	}
	
	private String letterGrade(double grade) {
		if (grade >= 90) return "A";
		if (grade >= 80) return "B";
		if (grade >= 70) return "C";
		if (grade >= 60) return "D";
		return "F";
	}
	
	@PutMapping("/gradebook/{id}")
	@Transactional
	public void updateGradebook (@RequestBody GradebookDTO gradebook, @PathVariable("id") Integer assignmentId,@AuthenticationPrincipal OAuth2User principal) {
		
		// check that this request is from the course instructor 
		String instructor_email = principal.getAttribute("email");
		checkAssignment(assignmentId, instructor_email);  // check that user name matches instructor email of the course.
		
		// for each grade in gradebook, update the assignment grade in database 
		
		for (GradebookDTO.Grade g : gradebook.grades) {
			AssignmentGrade ag = assignmentGradeRepository.findById(g.assignmentGradeId);
			if (ag == null) {
				throw new ResponseStatusException( HttpStatus.BAD_REQUEST, "Invalid grade primary key. "+g.assignmentGradeId);
			}
			ag.setScore(g.grade);
			assignmentGradeRepository.save(ag);
		}
		
	}
	
	private Assignment checkAssignment(int assignmentId, String email) {
		// get assignment 
		Assignment assignment = assignmentRepository.findById(assignmentId);
		if (assignment == null) {
			throw new ResponseStatusException( HttpStatus.BAD_REQUEST, "Assignment not found. "+assignmentId );
		}
		// check that user is the course instructor
		if (!assignment.getCourse().getInstructor().equals(email)) {
			throw new ResponseStatusException( HttpStatus.UNAUTHORIZED, "Not Authorized. " );
		}
		
		return assignment;
	}

}
